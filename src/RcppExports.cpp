// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_moran_part
Rcpp::List compute_moran_part(Rcpp::RObject input, Rcpp::IntegerVector indices, Rcpp::NumericVector weights, Rcpp::IntegerVector runs);
RcppExport SEXP _spatula_compute_moran_part(SEXP inputSEXP, SEXP indicesSEXP, SEXP weightsSEXP, SEXP runsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type input(inputSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type runs(runsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_moran_part(input, indices, weights, runs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spatula_compute_moran_part", (DL_FUNC) &_spatula_compute_moran_part, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_spatula(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
